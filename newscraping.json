{
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": ""
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n    \"username\": [\"excelbranding\"],\n    \"resultsLimit\": 20,\n    \"sort\": \"newest\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -6140,
        -1920
      ],
      "id": "4df85e30-4806-4259-a42d-4b9565defbf8",
      "name": "Instagram Scraper"
    },
    {
      "parameters": {
        "jsCode": "// =================================\n// –ù–ê–°–¢–†–û–ô–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–ù–¢–ï–ù–¢–ê INSTAGRAM\n// =================================\n// –ò–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 10:\n// 10 = –¢–æ–ª—å–∫–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ —Ö–∏—Ç—ã (2-3 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é)\n// 9 = –¢–æ–ø–æ–≤—ã–µ —Ö–∏—Ç—ã (3-4 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é)\n// 8 = –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (6-8 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é) ‚≠ê –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø\n// 7 = –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (8-10 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é)\n// 6 = –ù–µ–ø–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (10-12 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é)\n// 5 = –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (12-15 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é)\n// 4 = –ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (15-18 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é)\n// 3 = –°–ª–∞–±–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (18-20 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é)\n// 1-2 = –õ—é–±–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (~20 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é)\nconst QUALITY_LEVEL = 5; // ‚≠ê –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞\n\n// =================================\n// –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\n// =================================\nconst qualitySettings = {\n  10: { threshold: 86, min: 2, max: 3 },\n  9:  { threshold: 68, min: 3, max: 4 },\n  8:  { threshold: 65, min: 6, max: 8 },\n  7:  { threshold: 60, min: 8, max: 10 },\n  6:  { threshold: 50, min: 10, max: 12 },\n  5:  { threshold: 40, min: 12, max: 15 },\n  4:  { threshold: 30, min: 15, max: 18 },\n  3:  { threshold: 20, min: 18, max: 20 },\n  2:  { threshold: 10, min: 20, max: 20 },\n  1:  { threshold: 5,  min: 20, max: 20 }\n};\n\nconst { threshold, min: MIN_VIDEOS, max: MAX_VIDEOS } = qualitySettings[QUALITY_LEVEL] || { threshold: 65, min: 5, max: 10 };\n\n// =================================\n// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ Instagram Score\n// =================================\nfunction calculateInstagramScore(item) {\n  const views = item.videoViewCount || 0;\n  const likes = item.likesCount || 0;\n  const comments = item.commentsCount || 0;\n  \n  if (views === 0) return 0;\n  \n  // Engagement Rate (35%)\n  const engagement = likes + (comments * 2);\n  const engagementRate = (engagement / views) * 100;\n  let engagementScore = 0;\n  if (engagementRate >= 15) engagementScore = 35;\n  else if (engagementRate >= 10) engagementScore = 30 + (engagementRate - 10) * 1;\n  else if (engagementRate >= 5) engagementScore = 20 + (engagementRate - 5) * 2;\n  else if (engagementRate >= 2) engagementScore = 10 + (engagementRate - 2) * 3.33;\n  else engagementScore = engagementRate * 5;\n  \n  // View Velocity (25%)\n  const hoursOld = item.timestamp ? \n    (Date.now() - new Date(item.timestamp).getTime()) / (1000 * 60 * 60) : 24;\n  const velocity = views / Math.max(hoursOld, 1);\n  let velocityScore = 0;\n  if (velocity >= 100000) velocityScore = 25;\n  else if (velocity >= 50000) velocityScore = 20 + (velocity - 50000) / 10000;\n  else if (velocity >= 10000) velocityScore = 15 + (velocity - 10000) / 8000;\n  else if (velocity >= 1000) velocityScore = 8 + (velocity - 1000) / 1285;\n  else velocityScore = velocity / 125;\n  \n  // Popularity (25%)\n  let popularityScore = 0;\n  if (views >= 1000000) popularityScore = 25;\n  else if (views >= 500000) popularityScore = 22 + (views - 500000) / 166666;\n  else if (views >= 100000) popularityScore = 18 + (views - 100000) / 100000;\n  else if (views >= 50000) popularityScore = 15 + (views - 50000) / 16666;\n  else if (views >= 10000) popularityScore = 10 + (views - 10000) / 8000;\n  else if (views >= 1000) popularityScore = 5 + (views - 1000) / 1800;\n  else popularityScore = views / 200;\n  \n  // Content Quality Bonus (15%)\n  let contentScore = 5;\n  if (item.hashtags && item.hashtags.length > 0) {\n    if (item.hashtags.length >= 5) contentScore += 4;\n    else if (item.hashtags.length >= 3) contentScore += 3;\n    else contentScore += 2;\n  }\n  if (item.musicInfo && !item.musicInfo.uses_original_audio) contentScore += 3;\n  if (item.text && item.text.length > 50) contentScore += Math.min(3, item.text.length / 50);\n  contentScore = Math.min(contentScore, 15);\n  \n  const totalScore = engagementScore + velocityScore + popularityScore + contentScore;\n  return Math.round(Math.min(totalScore, 100));\n}\n\n// =================================\n// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ\n// =================================\nconst allItems = $input.all().map(item => item.json);\n\nconst processedItems = allItems.map(item => ({\n  ...item,\n  content_score: calculateInstagramScore(item)\n}));\n\n// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ—Ä–æ–≥—É\nlet selectedItems = processedItems.filter(item => item.content_score > threshold);\n\n// –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–æ –º–∏–Ω–∏–º—É–º–∞ ‚Äî –¥–æ–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –ø–æ —Å–∫–æ—Ä—É\nif (selectedItems.length < MIN_VIDEOS) {\n  console.log(`\\n‚ö†Ô∏è –ú–∞–ª–æ –≤–∏–¥–µ–æ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ (${selectedItems.length}/${MIN_VIDEOS}). –î–æ–±–∏—Ä–∞–µ–º.`);\n  const extra = processedItems\n    .filter(item => !selectedItems.includes(item))\n    .sort((a, b) => b.content_score - a.content_score)\n    .slice(0, MIN_VIDEOS - selectedItems.length);\n  selectedItems = [...selectedItems, ...extra];\n}\n\n// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º\nselectedItems = selectedItems\n  .sort((a, b) => b.content_score - a.content_score)\n  .slice(0, MAX_VIDEOS);\n\nconst finalItems = selectedItems;\n\n// =================================\n// –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n// =================================\nconsole.log('='.repeat(50));\nconsole.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò`);\nconsole.log('='.repeat(50));\nconsole.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: ${allItems.length}`);\nconsole.log(`‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${finalItems.length}`);\nconsole.log(`‚úÖ –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞: ${QUALITY_LEVEL}/10`);\nconsole.log(`‚úÖ –ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞: ${threshold} –±–∞–ª–ª–æ–≤`);\n\nconst scoreRanges = {\n  '80-100': 0,\n  '60-79': 0,\n  '40-59': 0,\n  '20-39': 0,\n  '0-19': 0\n};\n\nprocessedItems.forEach(item => {\n  if (item.content_score >= 80) scoreRanges['80-100']++;\n  else if (item.content_score >= 60) scoreRanges['60-79']++;\n  else if (item.content_score >= 40) scoreRanges['40-59']++;\n  else if (item.content_score >= 20) scoreRanges['20-39']++;\n  else scoreRanges['0-19']++;\n});\n\nconsole.log('\\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –ø–æ —Å–∫–æ—Ä–∞–º:');\nObject.entries(scoreRanges).forEach(([range, count]) => {\n  const percentage = ((count / allItems.length) * 100).toFixed(1);\n  console.log(`   ${range}: ${count} –≤–∏–¥–µ–æ (${percentage}%)`);\n});\n\nconsole.log('\\nüèÜ –¢–æ–ø-5 –≤–∏–¥–µ–æ –ø–æ —Å–∫–æ—Ä—É:');\nprocessedItems\n  .sort((a, b) => b.content_score - a.content_score)\n  .slice(0, 5)\n  .forEach((item, index) => {\n    const status = item.content_score > threshold ? '‚úÖ' : '‚ùå';\n    const views = item.videoViewCount ? item.videoViewCount.toLocaleString() : '0';\n    const likes = item.likesCount ? item.likesCount.toLocaleString() : '0';\n    console.log(`${index + 1}. ${status} Score: ${item.content_score} | Views: ${views} | Likes: ${likes}`);\n  });\n\nif (finalItems.length === 0) {\n  console.log('\\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞!');\n  throw new Error('–ù–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');\n}\n\nreturn finalItems.map(item => ({ json: item }));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5780,
        -1920
      ],
      "id": "b8f8cbd0-0ca5-4bab-842c-f5f5b51af5dd",
      "name": "Instagram Virality Filter"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -4500,
        -1900
      ],
      "id": "0f214578-9582-493b-bd5d-16724d57a93b",
      "name": "Split Instagram Videos",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "={{ $('Split Instagram Videos').item.json.videoUrl }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3900,
        -1900
      ],
      "id": "98fcbd03-47a8-4566-b03c-3443f14e5ceb",
      "name": "Download Instagram Video"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": ""
            },
            {
              "name": "Content-Type",
              "value": "application/octet-stream"
            }
          ]
        },
        "sendBody": true,
        "contentType": "binaryData",
        "inputDataFieldName": "data",
        "options": {
          "response": {
            "response": {
              "fullResponse": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3600,
        -1900
      ],
      "id": "a76d8666-57bc-4ca2-b6a5-acbd4a6bce8a",
      "name": "Upload Instagram Video"
    },
    {
      "parameters": {
        "tableId": "videos",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "timestamp",
              "fieldValue": "={{ $('Split Instagram Videos').item.json.latestComments[0].timestamp }}"
            },
            {
              "fieldId": "caption",
              "fieldValue": "={{ $('Split Instagram Videos').item.json.caption }}"
            },
            {
              "fieldId": "likes_count",
              "fieldValue": "={{ $json.likesCount || $json.like_count || 0 }}"
            },
            {
              "fieldId": "video_view_count",
              "fieldValue": "={{ $json.videoViewCount || $json.video_views || $json.views || 0 }}"
            },
            {
              "fieldId": "source",
              "fieldValue": "excelbranding"
            },
            {
              "fieldId": "status",
              "fieldValue": "new"
            },
            {
              "fieldId": "original_video_key",
              "fieldValue": "={{ $json.body.Key }}"
            },
            {
              "fieldId": "video_url",
              "fieldValue": "={{ $('Duplicate Filter1').item.json.videoUrl }}"
            },
            {
              "fieldId": "post_url",
              "fieldValue": "={{ $('Duplicate Filter1').item.json.videoUrl }}"
            },
            {
              "fieldId": "short_code",
              "fieldValue": "={{ $('Instagram Virality Filter').item.json.shortCode }}"
            },
            {
              "fieldId": "instagram_id",
              "fieldValue": "={{ $('Instagram Virality Filter').item.json.id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -3300,
        -1900
      ],
      "id": "a24a740b-3417-4ca1-bb5f-f78cce3b1c81",
      "name": "Add Instagram to DB",
      "credentials": {
        "supabaseApi": {
          "id": "G91LxvStJeEUrkzl",
          "name": "Supabase account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è Instagram\nfunction generateUniqueId(length = 12) {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n}\n\nconst uniqueId = generateUniqueId();\nconst fileName = `original_video_${uniqueId}.mp4`;\n\nreturn {\n  unique_id: uniqueId,\n  file_name: fileName,\n  timestamp: new Date().toISOString(),\n  status: 'pending'\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4200,
        -1900
      ],
      "id": "9714ece3-397b-4bc1-9bd8-1292f5c74555",
      "name": "Generate Unique ID5"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": ""
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n    \"excludePinnedPosts\": true,\n    \"profileScrapeSections\": [\"videos\"],\n    \"profileSorting\": \"latest\",\n    \"profiles\": [\"nikko.montanez\"],\n    \"proxyCountryCode\": \"None\",\n    \"resultsPerPage\":20,\n    \"scrapeRelatedVideos\": false,\n    \"shouldDownloadAvatars\": false,\n    \"shouldDownloadCovers\": false,\n    \"shouldDownloadMusicCovers\": false,\n    \"shouldDownloadSlideshowImages\": false,\n    \"shouldDownloadSubtitles\": true,\n    \"shouldDownloadVideos\": true\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -6120,
        -2400
      ],
      "id": "1c16992a-f86d-4a76-a8bb-7ef974d406dc",
      "name": "TikTok Scraper"
    },
    {
      "parameters": {
        "jsCode": "// =================================\n// –ù–ê–°–¢–†–û–ô–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ö–û–ù–¢–ï–ù–¢–ê\n// =================================\n// –ò–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 10:\n// 10 = –¢–æ–ª—å–∫–æ —Ö–∏—Ç—ã (1-3 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é)\n// 8 = –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (5-8 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é) ‚≠ê –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø\n// 6 = –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (8-12 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é)\n// 4 = –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ (12-15 –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é)\n// 1 = –õ—é–±–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (15+ –≤–∏–¥–µ–æ/–Ω–µ–¥–µ–ª—é)\n\nconst QUALITY_LEVEL = 5; // ‚≠ê –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞\n\n// =================================\n// –ù–ï –ò–ó–ú–ï–ù–Ø–ô–¢–ï –ö–û–î –ù–ò–ñ–ï\n// =================================\n\nconst qualitySettings = {\n10: 50, 9: 47, 8: 44, 7: 41, 6: 38,\n5: 35, 4: 32, 3: 29, 2: 26, 1: 23\n};\nconst threshold = qualitySettings[QUALITY_LEVEL] || 41;\n\nfunction calculateContentScore(item) {\nconst views = item.playCount || 0;\nconst likes = item.diggCount || 0;\nconst comments = item.commentCount || 0;\nconst shares = item.shareCount || 0;\nconst saves = item.collectCount || 0;\n\nif (views === 0) return 0;\n\nconst engagement = likes + comments + shares + saves;\nconst engagementRate = (engagement / views) * 100;\nconst engagementScore = Math.min(engagementRate * 2, 40);\n\nconst hoursOld = (Date.now() - new Date(item.createTimeISO).getTime()) / (1000 * 60 * 60);\nconst velocity = hoursOld > 0 ? views / Math.max(hoursOld, 1) : 0;\nconst velocityScore = Math.min(Math.log10(velocity + 1) * 6, 30);\n\nconst popularityScore = Math.min(Math.log10(views + 1) * 2.5, 20);\n\nconst hasHashtags = item.text && item.text.includes('#') ? 3 : 0;\nconst hasMusic = item.musicMeta ? 2 : 0;\nconst contentScore = 5 + hasHashtags + hasMusic;\n\nconst totalScore = engagementScore + velocityScore + popularityScore + contentScore;\nreturn Math.round(Math.min(totalScore, 100));\n}\n\nconst allItems = $input.all().map(item => item.json);\nconst processedItems = allItems.map(item => ({\n...item,\ncontent_score: calculateContentScore(item)\n}));\nconst selectedItems = processedItems.filter(item => item.content_score > threshold);\nconst finalItems = selectedItems.sort((a, b) => b.content_score - a.content_score);\n\nconsole.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${allItems.length} –≤–∏–¥–µ–æ`);\nconsole.log(`‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${finalItems.length} –≤–∏–¥–µ–æ`);\nconsole.log(`‚úÖ –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞: ${QUALITY_LEVEL}/10`);\n\nif (finalItems.length === 0) {\n throw new Error('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∏–∑–∏—Ç—å QUALITY_LEVEL');\n}\n\nreturn finalItems.map(item => ({ json: item }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -5720,
        -2400
      ],
      "id": "e4879389-a59f-4b9a-83bb-e1e9909780b9",
      "name": "Filter & Score Videos"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtHour": 9
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -6580,
        -2400
      ],
      "id": "c496d2a5-b67a-449b-aecf-5785d5746a8b",
      "name": "Weekly Scraper1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -5040,
        -2380
      ],
      "id": "dec27cec-180e-4a13-8931-f20551881c37",
      "name": "Merge"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "videos",
        "returnAll": true
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -5320,
        -2280
      ],
      "id": "1d9f7fb0-a744-474a-81a4-ab86d3233a44",
      "name": "Get Links",
      "credentials": {
        "supabaseApi": {
          "id": "G91LxvStJeEUrkzl",
          "name": "Supabase account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// –ö–æ–¥ –¥–ª—è Code –Ω–æ–¥—ã –≤ n8n –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\n\n// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\nconst allItems = $input.all();\n\n// –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞\nconst newVideos = [];\nconst existingVideos = [];\n\n// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–ª–∏—á–∏—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –ø–æ–ª–µ–π\nfor (const item of allItems) {\n  const data = item.json;\n  \n  // –ï—Å–ª–∏ –µ—Å—Ç—å webVideoUrl - —ç—Ç–æ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç Filter & Score Videos\n  if (data.webVideoUrl !== undefined) {\n    newVideos.push(item);\n  }\n  // –ï—Å–ª–∏ –µ—Å—Ç—å video_url –∏–ª–∏ post_url - —ç—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase\n  else if (data.video_url !== undefined || data.post_url !== undefined) {\n    existingVideos.push(item);\n  }\n  // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è\n  else if (data.authorMeta && data.musicMeta) {\n    // –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É TikTok –≤–∏–¥–µ–æ\n    newVideos.push(item);\n  } else if (data.caption && data.source) {\n    // –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ –ë–î\n    existingVideos.push(item);\n  }\n}\n\nconsole.log(`–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ: ${newVideos.length}`);\nconsole.log(`–í–∏–¥–µ–æ –≤ –ë–î: ${existingVideos.length}`);\n\n// –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏\nif (newVideos.length === 0) {\n  console.log('–ù–µ—Ç –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');\n  return [];\n}\n\n// –°–æ–∑–¥–∞–µ–º Set —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ URL –∏ ID –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞\nconst existingUrls = new Set();\nconst existingIds = new Set();\n\n// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase\nfor (const item of existingVideos) {\n  const video = item.json;\n  \n  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π ID\n  if (video.id) {\n    existingIds.add(String(video.id));\n  }\n  \n  // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∏–¥–µ–æ –∏–∑ URL –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª\n  if (video.video_url) {\n    existingUrls.add(video.video_url);\n    \n    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–∑ URL\n    const match = video.video_url.match(/video-.*-(\\d+)\\.mp4/);\n    if (match) {\n      existingIds.add(match[1]); // –î–æ–±–∞–≤–ª—è–µ–º ID –≤–∏–¥–µ–æ\n    }\n  }\n  \n  if (video.post_url) {\n    existingUrls.add(video.post_url);\n    \n    const match = video.post_url.match(/video-.*-(\\d+)\\.mp4/);\n    if (match) {\n      existingIds.add(match[1]);\n    }\n  }\n}\n\nconsole.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –≤ –ë–î: ${existingIds.size}`);\nconsole.log(`URL –≤ –ë–î: ${existingUrls.size}`);\n\n// –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ\nconst filteredVideos = [];\nconst duplicatesFound = [];\n\nfor (const item of newVideos) {\n  const video = item.json;\n  let isDuplicate = false;\n  let duplicateReason = '';\n  \n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –≤–∏–¥–µ–æ\n  if (video.id && existingIds.has(String(video.id))) {\n    isDuplicate = true;\n    duplicateReason = `ID ${video.id} —É–∂–µ –≤ –ë–î`;\n  }\n  \n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ webVideoUrl\n  if (!isDuplicate && video.webVideoUrl) {\n    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–π URL\n    if (existingUrls.has(video.webVideoUrl)) {\n      isDuplicate = true;\n      duplicateReason = 'URL —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';\n    }\n    \n    // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL TikTok –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º\n    const tiktokIdMatch = video.webVideoUrl.match(/video\\/(\\d+)/);\n    if (tiktokIdMatch && existingIds.has(tiktokIdMatch[1])) {\n      isDuplicate = true;\n      duplicateReason = `TikTok ID ${tiktokIdMatch[1]} —É–∂–µ –≤ –ë–î`;\n    }\n  }\n  \n  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è\n  if (!isDuplicate && video.authorMeta && video.createTime) {\n    for (const existingItem of existingVideos) {\n      const existing = existingItem.json;\n      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Å —Ç–µ–º –∂–µ –∞–≤—Ç–æ—Ä–æ–º –∏ –≤—Ä–µ–º–µ–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏—è\n      if (existing.unique_id === video.authorMeta.name && \n          existing.timestamp === video.createTime) {\n        isDuplicate = true;\n        duplicateReason = '–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∞–≤—Ç–æ—Ä—É –∏ –≤—Ä–µ–º–µ–Ω–∏';\n        break;\n      }\n    }\n  }\n  \n  // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥—É–±–ª–∏–∫–∞—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n  if (!isDuplicate) {\n    filteredVideos.push({\n      json: video,\n      pairedItem: item.pairedItem\n    });\n  } else {\n    duplicatesFound.push({\n      text: video.text ? video.text.substring(0, 50) : '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞',\n      reason: duplicateReason\n    });\n  }\n}\n\n// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\nconsole.log('\\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò ===');\nconsole.log(`–í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ: ${newVideos.length}`);\nconsole.log(`–°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤ –ë–î: ${existingVideos.length}`);\nconsole.log(`–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredVideos.length}`);\nconsole.log(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicatesFound.length}`);\n\nif (duplicatesFound.length > 0) {\n  console.log('\\n=== –ù–ê–ô–î–ï–ù–ù–´–ï –î–£–ë–õ–ò–ö–ê–¢–´ (–ø–µ—Ä–≤—ã–µ 5) ===');\n  duplicatesFound.slice(0, 5).forEach((dup, index) => {\n    console.log(`${index + 1}. ${dup.reason}: \"${dup.text}...\"`);\n  });\n}\n\n// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ\nreturn filteredVideos;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4740,
        -2380
      ],
      "id": "97f643fa-cb69-49ef-ad3c-32678574bf42",
      "name": "Duplicate Filter",
      "executeOnce": false,
      "notes": "// ======= –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–ï–†–ï–ë–û–†–û–ú –í–°–ï–• –ù–û–í–û–°–¢–ï–ô –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï–ú –ü–û–ü–´–¢–û–ö =======\n\nfunction filterNewsWithAdvancedChecks(existingPosts, searchResults) {\n  console.log('–ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π...');\n  \n  // üõ†Ô∏è –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ true –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n  const DEBUG_MODE = false; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ true –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\n  \n  // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞\n  let retryCount = ($json.retry_count || 0);\n  const MAX_RETRIES = 3; // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏\n  \n  if (DEBUG_MODE) {\n    console.log('üõ†Ô∏è –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò –ê–ö–¢–ò–í–ï–ù - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã');\n    if (searchResults.organic_results && searchResults.organic_results.length > 0) {\n      const firstResult = searchResults.organic_results[0];\n      return [{\n        status: 'success',\n        title: firstResult.title,\n        description: firstResult.snippet,\n        link: firstResult.link,\n        position: firstResult.position || 1,\n        debug_mode: true,\n        restart_search: false,\n        retry_count: retryCount,\n        timestamp: new Date().toISOString()\n      }];\n    }\n  }\n  \n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n  if (!searchResults || !searchResults.organic_results || searchResults.organic_results.length === 0) {\n    console.log('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');\n    return [{\n      status: 'no_search_results',\n      message: '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',\n      restart_search: true,\n      retry_count: retryCount + 1,\n      processed_count: 0,\n      filtered_count: 0,\n      timestamp: new Date().toISOString()\n    }];\n  }\n\n  const existingLinks = existingPosts\n    .map(post => {\n      const linkMatch = post.content ? post.content.match(/\\[–ü–æ–¥—Ä–æ–±–Ω–µ–µ\\]\\((.*?)\\)/) : null;\n      return linkMatch ? linkMatch[1] : null;\n    })\n    .filter(link => link !== null);\n  const existingLinksSet = new Set(existingLinks);\n  \n  const existingTitles = existingPosts\n    .map(post => {\n      const titleMatch = post.content ? post.content.match(/\\*(.*?)\\*/) : null;\n      return titleMatch ? titleMatch[1].toLowerCase() : null;\n    })\n    .filter(title => title !== null);\n\n  console.log(`–ù–∞–π–¥–µ–Ω–æ ${existingLinks.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Å—ã–ª–æ–∫`);\n  console.log(`–ù–∞–π–¥–µ–Ω–æ ${existingTitles.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤`);\n  console.log(`–ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${searchResults.organic_results.length} –Ω–æ–≤–æ—Å—Ç–µ–π`);\n  \n  // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê\n  console.log('üîç –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–°–´–õ–ö–ò:');\n  existingLinks.forEach((link, i) => console.log(`  ${i+1}. ${link}`));\n  \n  console.log('üîç –ù–û–í–´–ï –°–°–´–õ–ö–ò –ò–ó –ü–û–ò–°–ö–ê:');\n  searchResults.organic_results.forEach((result, i) => {\n    console.log(`  ${i+1}. ${result.title} | ${result.link}`);\n  });\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ URL (—Å —É—á–µ—Ç–æ–º –æ—à–∏–±–æ–∫ 403, PDF –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)\n  function isProblematicUrl(url, title, snippet) {\n    const criticalPatterns = [\n      'nie jest ju≈º dostƒôpne',\n      'zosta≈Ço usuniƒôte', \n      'nie istnieje',\n      'b≈ÇƒÖd 404',\n      'page not found',\n      'resource could not be found',\n      'strona nie zosta≈Ça odnaleziona',\n      '/wp-admin/',\n      '/admin/login',\n      '/archive/old/',\n      '/archiwum/stare/',\n      'just a moment', // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä Cloudflare 403\n      'enable javascript and cookies', // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä 403\n      'pik.krakow.pl', // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è pik.krakow.pl\n      'krakow.pl/getPdf', // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ PDF\n      'repozytorium.asp.krakow.pl' // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π\n    ];\n    \n    const textToCheck = `${url} ${title} ${snippet}`.toLowerCase();\n    \n    for (const pattern of criticalPatterns) {\n      if (textToCheck.includes(pattern)) {\n        console.log(`üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ URL: ${pattern} –Ω–∞–π–¥–µ–Ω –≤ ${url}`);\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ URL\n  function isLikelyOutdated(url, title, snippet, publishedAt) {\n    const HOURS_LIMIT = 12; // –§–∏–ª—å—Ç—Ä –∑–∞ 12 —á–∞—Å–æ–≤\n    const now = new Date();\n\n    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ publishedAt, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ\n    if (publishedAt) {\n      const pubDate = new Date(publishedAt);\n      const hoursDiff = (now - pubDate) / (1000 * 60 * 60);\n      if (hoursDiff > HOURS_LIMIT) {\n        console.log(`üìÖ –ù–æ–≤–æ—Å—Ç—å —É—Å—Ç–∞—Ä–µ–ª–∞ –Ω–∞ ${Math.round(hoursDiff)} —á–∞—Å–æ–≤: ${title}`);\n        return true;\n      }\n      return false;\n    }\n\n    // Fallback: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ URL\n    const dateMatches = url.match(/(\\d{4})[\\/\\-](\\d{1,2})[\\/\\-](\\d{1,2})/);\n    if (dateMatches) {\n      const urlDate = new Date(dateMatches[1], dateMatches[2] - 1, dateMatches[3]);\n      const daysDiff = (now - urlDate) / (1000 * 60 * 60 * 24);\n      if (daysDiff > 0.5) { // 0.5 –¥–Ω—è = 12 —á–∞—Å–æ–≤\n        console.log(`üìÖ URL —É—Å—Ç–∞—Ä–µ–ª –Ω–∞ ${Math.round(daysDiff)} –¥–Ω–µ–π: ${url}`);\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞\n  function hasStopWords(title, snippet) {\n    const stopWords = [\n      'wojna', 'wojenny', 'wojenna', 'wojen',\n      'morderstwo', 'morderstwa', 'mordercy', 'morderca',\n      'obrona', 'obrony', 'obronne',\n      'reklama', 'reklamy', 'reklamowy'\n    ];\n    \n    const textToCheck = `${title} ${snippet}`.toLowerCase();\n    \n    for (const word of stopWords) {\n      if (textToCheck.includes(word)) {\n        console.log(`üö´ –°—Ç–æ–ø-—Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ: \"${word}\" –≤ \"${textToCheck}\"`);\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏\n  const sortedResults = [...searchResults.organic_results].sort((a, b) => {\n    const aHasDate = /\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}/.test(a.link);\n    const bHasDate = /\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}/.test(b.link);\n    \n    if (!aHasDate && bHasDate) return -1;\n    if (aHasDate && !bHasDate) return 1;\n    \n    if (a.position && b.position) {\n      return a.position - b.position;\n    }\n    \n    return 0;\n  });\n  \n  const filteredReasons = {\n    duplicateLink: 0,\n    duplicateTitle: 0,\n    problematicUrl: 0,\n    outdated: 0,\n    stopWords: 0\n  };\n  \n  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–æ –ø–µ—Ä–≤–æ–π –≤–∞–ª–∏–¥–Ω–æ–π\n  for (let i = 0; i < sortedResults.length; i++) {\n    const result = sortedResults[i];\n    const link = result.link;\n    const title = result.title;\n    const snippet = result.snippet || '';\n    const publishedAt = result.publishedAt || null; // –ü–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n    \n    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç—å ${i + 1}/${sortedResults.length}: ${title}`);\n    \n    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç —Å—Å—ã–ª–∫–∏\n    const isLinkDuplicate = existingLinksSet.has(link);\n    if (isLinkDuplicate) {\n      filteredReasons.duplicateLink++;\n      console.log(`‚ùå –î—É–±–ª–∏–∫–∞—Ç —Å—Å—ã–ª–∫–∏: ${title} | URL: ${link}`);\n      continue;\n    }\n    \n    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞\n    const normalizedTitle = title.toLowerCase().trim();\n    const isTitleDuplicate = existingTitles.some(existingTitle => {\n      const similarity = normalizedTitle === existingTitle || \n                        (normalizedTitle.length > 10 && existingTitle.includes(normalizedTitle)) ||\n                        (existingTitle.length > 10 && normalizedTitle.includes(existingTitle));\n      if (similarity) {\n        console.log(`üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:`);\n        console.log(`   –ù–æ–≤—ã–π: \"${normalizedTitle}\"`);\n        console.log(`   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π: \"${existingTitle}\"`);\n      }\n      return similarity;\n    });\n    if (isTitleDuplicate) {\n      filteredReasons.duplicateTitle++;\n      console.log(`‚ùå –î—É–±–ª–∏–∫–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${title}`);\n      continue;\n    }\n    \n    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞\n    if (hasStopWords(title, snippet)) {\n      filteredReasons.stopWords++;\n      console.log(`‚ùå –ù–æ–≤–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤–∞: ${title}`);\n      continue;\n    }\n    \n    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ URL\n    if (isProblematicUrl(link, title, snippet)) {\n      filteredReasons.problematicUrl++;\n      console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${title}`);\n      continue;\n    }\n    \n    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ URL\n    if (isLikelyOutdated(link, title, snippet, publishedAt)) {\n      filteredReasons.outdated++;\n      console.log(`‚ùå –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –Ω–æ–≤–æ—Å—Ç—å: ${title}`);\n      continue;\n    }\n    \n    // –ù–æ–≤–æ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–∞\n    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å: ${title}`);\n    \n    return [{\n      status: 'success',\n      title: title,\n      description: snippet,\n      link: link,\n      position: result.position || i + 1,\n      source: result.source || '',\n      isFiltered: true,\n      processed_count: sortedResults.length,\n      checked_count: i + 1,\n      filtered_count: i,\n      filter_reasons: filteredReasons,\n      restart_search: false,\n      retry_count: retryCount,\n      timestamp: new Date().toISOString()\n    }];\n  }\n  \n  // –ï—Å–ª–∏ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã\n  retryCount++;\n  if (retryCount >= MAX_RETRIES) {\n    console.log(`‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ (${retryCount}). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª.`);\n    return [{\n      status: 'max_retries',\n      message: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π',\n      processed_count: sortedResults.length,\n      filtered_count: sortedResults.length,\n      retry_count: retryCount,\n      restart_search: false,\n      timestamp: new Date().toISOString()\n    }];\n  }\n  \n  console.log(`‚ùå –í—Å–µ ${sortedResults.length} –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—ã—Ç–∫–∞ ${retryCount}.`);\n  \n  return [{\n    status: 'all_filtered',\n    message: '–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫',\n    processed_count: sortedResults.length,\n    filtered_count: sortedResults.length,\n    retry_count: retryCount,\n    restart_search: true,\n    timestamp: new Date().toISOString()\n  }];\n}\n\n// ======= –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø N8N =======\ntry {\n  // –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n  const allInputs = $input.all();\n  console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${allInputs.length} –≤—Ö–æ–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);\n  \n  // –†–∞–∑–¥–µ–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ—Å—Ç—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞\n  const existingPosts = allInputs\n    .filter(item => item.json && (item.json.id || item.json.post_id))\n    .map(item => item.json);\n  \n  const searchResultsItem = allInputs.find(item => \n    item.json && item.json.organic_results\n  );\n  \n  if (!searchResultsItem) {\n    console.log('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞');\n    return [{\n      status: 'error',\n      error_type: 'no_search_data',\n      message: '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –≤ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',\n      received_inputs: allInputs.length,\n      restart_search: true,\n      timestamp: new Date().toISOString()\n    }];\n  }\n  \n  const searchResults = searchResultsItem.json;\n  console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤: ${existingPosts.length}`);\n  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: ${searchResults.organic_results ? searchResults.organic_results.length : 0}`);\n  \n  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é\n  const result = filterNewsWithAdvancedChecks(existingPosts, searchResults);\n  \n  console.log('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');\n  console.log(`–°—Ç–∞—Ç—É—Å: ${result[0].status}`);\n  console.log(`–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞: ${result[0].restart_search}`);\n  \n  return result;\n  \n} catch (error) {\n  console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', error);\n  \n  let retryCount = ($json.retry_count || 0) + 1;\n  const MAX_RETRIES = 5;\n  \n  if (retryCount >= MAX_RETRIES) {\n    console.log(`‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ (${retryCount}) –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏.`);\n    return [{\n      status: 'error',\n      error_type: 'max_retries',\n      message: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏',\n      stack: error.stack,\n      retry_count: retryCount,\n      restart_search: false,\n      timestamp: new Date().toISOString()\n    }];\n  }\n  \n  return [{\n    status: 'error',\n    error_type: 'processing_error',\n    message: error.message,\n    stack: error.stack,\n    retry_count: retryCount,\n    restart_search: true,\n    timestamp: new Date().toISOString()\n  }];\n}\n\n----------------------\n\nüìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
    },
    {
      "parameters": {
        "url": "={{ $json.videoMeta.subtitleLinks[0].downloadLink }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -4440,
        -2380
      ],
      "id": "082b9b2e-ad02-4c2c-82b6-50a5e9b87a5e",
      "name": "Download TikTok Sub"
    },
    {
      "parameters": {
        "tableId": "videos",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "video_url",
              "fieldValue": "={{ $('Duplicate Filter').item.json.mediaUrls[0] }}"
            },
            {
              "fieldId": "post_url",
              "fieldValue": "={{ $('Duplicate Filter').item.json.mediaUrls[0] }}"
            },
            {
              "fieldId": "caption",
              "fieldValue": "={{ $json.data }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -4160,
        -2380
      ],
      "id": "470b3e32-fb17-4477-8caf-fd9cd4ce0f5e",
      "name": "Add to DB",
      "alwaysOutputData": false,
      "credentials": {
        "supabaseApi": {
          "id": "G91LxvStJeEUrkzl",
          "name": "Supabase account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "videos",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "short_code",
              "condition": "eq",
              "keyValue": "={{ $json.shortCode }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -5480,
        -1760
      ],
      "id": "6748a748-d7e1-4e35-affc-348d2135fa0b",
      "name": "Get Links1",
      "credentials": {
        "supabaseApi": {
          "id": "G91LxvStJeEUrkzl",
          "name": "Supabase account 2"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -5240,
        -1900
      ],
      "id": "e4f5f531-eb6d-4b08-82ad-4510c0d98e60",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ Merge –Ω–æ–¥—ã\nconst allItems = $input.all();\n\n// –°–æ–∑–¥–∞–µ–º –Ω–∞–±–æ—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö short_code –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\nconst existingShortCodes = new Set();\n\n// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏–∑ –ë–î –∏ —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö short_code\nallItems.forEach(item => {\n    if (item.json.id !== undefined && typeof item.json.id === 'number') {\n        // –≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n        if (item.json.short_code) {\n            existingShortCodes.add(item.json.short_code);\n        }\n    }\n});\n\n// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞\nconst newItems = allItems.filter(item => {\n    // –≠—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ (—É –Ω–∏—Ö –Ω–µ—Ç —á–∏—Å–ª–æ–≤–æ–≥–æ ID)\n    if (item.json.id === undefined || typeof item.json.id !== 'number') {\n        const shortCode = item.json.shortCode || item.json.short_code;\n        return shortCode && !existingShortCodes.has(shortCode);\n    }\n    return false; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ë–î\n});\n\n// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\nconsole.log('='.repeat(50));\nconsole.log('üéØ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ù–û–í–´–• –í–ò–î–ï–û');\nconsole.log('='.repeat(50));\nconsole.log(`‚úÖ –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${allItems.length}`);\nconsole.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: ${existingShortCodes.size}`);\nconsole.log(`‚úÖ –ù–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${newItems.length}`);\n\n// –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\nconsole.log('\\nüîç –ü–µ—Ä–≤—ã–µ 5 –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ:');\nnewItems.slice(0, 5).forEach((item, index) => {\n    const shortCode = item.json.shortCode || item.json.short_code;\n    console.log(`${index + 1}. shortCode: ${shortCode}`);\n});\n\nreturn newItems;\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -4900,
        -1900
      ],
      "id": "b14aa8c8-8b67-48bf-b532-6eab03e56cf2",
      "name": "Duplicate Filter1",
      "executeOnce": false,
      "notes": "// ======= –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–ï–†–ï–ë–û–†–û–ú –í–°–ï–• –ù–û–í–û–°–¢–ï–ô –ò –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï–ú –ü–û–ü–´–¢–û–ö =======\n\nfunction filterNewsWithAdvancedChecks(existingPosts, searchResults) {\n  console.log('–ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–µ–π...');\n  \n  // üõ†Ô∏è –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ true –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n  const DEBUG_MODE = false; // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ true –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏\n  \n  // –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–æ–∏—Å–∫–∞\n  let retryCount = ($json.retry_count || 0);\n  const MAX_RETRIES = 3; // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏\n  \n  if (DEBUG_MODE) {\n    console.log('üõ†Ô∏è –†–ï–ñ–ò–ú –û–¢–õ–ê–î–ö–ò –ê–ö–¢–ò–í–ï–ù - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã');\n    if (searchResults.organic_results && searchResults.organic_results.length > 0) {\n      const firstResult = searchResults.organic_results[0];\n      return [{\n        status: 'success',\n        title: firstResult.title,\n        description: firstResult.snippet,\n        link: firstResult.link,\n        position: firstResult.position || 1,\n        debug_mode: true,\n        restart_search: false,\n        retry_count: retryCount,\n        timestamp: new Date().toISOString()\n      }];\n    }\n  }\n  \n  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n  if (!searchResults || !searchResults.organic_results || searchResults.organic_results.length === 0) {\n    console.log('–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');\n    return [{\n      status: 'no_search_results',\n      message: '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',\n      restart_search: true,\n      retry_count: retryCount + 1,\n      processed_count: 0,\n      filtered_count: 0,\n      timestamp: new Date().toISOString()\n    }];\n  }\n\n  const existingLinks = existingPosts\n    .map(post => {\n      const linkMatch = post.content ? post.content.match(/\\[–ü–æ–¥—Ä–æ–±–Ω–µ–µ\\]\\((.*?)\\)/) : null;\n      return linkMatch ? linkMatch[1] : null;\n    })\n    .filter(link => link !== null);\n  const existingLinksSet = new Set(existingLinks);\n  \n  const existingTitles = existingPosts\n    .map(post => {\n      const titleMatch = post.content ? post.content.match(/\\*(.*?)\\*/) : null;\n      return titleMatch ? titleMatch[1].toLowerCase() : null;\n    })\n    .filter(title => title !== null);\n\n  console.log(`–ù–∞–π–¥–µ–Ω–æ ${existingLinks.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å—Å—ã–ª–æ–∫`);\n  console.log(`–ù–∞–π–¥–µ–Ω–æ ${existingTitles.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤`);\n  console.log(`–ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: ${searchResults.organic_results.length} –Ω–æ–≤–æ—Å—Ç–µ–π`);\n  \n  // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê\n  console.log('üîç –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –°–°–´–õ–ö–ò:');\n  existingLinks.forEach((link, i) => console.log(`  ${i+1}. ${link}`));\n  \n  console.log('üîç –ù–û–í–´–ï –°–°–´–õ–ö–ò –ò–ó –ü–û–ò–°–ö–ê:');\n  searchResults.organic_results.forEach((result, i) => {\n    console.log(`  ${i+1}. ${result.title} | ${result.link}`);\n  });\n\n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ URL (—Å —É—á–µ—Ç–æ–º –æ—à–∏–±–æ–∫ 403, PDF –∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è)\n  function isProblematicUrl(url, title, snippet) {\n    const criticalPatterns = [\n      'nie jest ju≈º dostƒôpne',\n      'zosta≈Ço usuniƒôte', \n      'nie istnieje',\n      'b≈ÇƒÖd 404',\n      'page not found',\n      'resource could not be found',\n      'strona nie zosta≈Ça odnaleziona',\n      '/wp-admin/',\n      '/admin/login',\n      '/archive/old/',\n      '/archiwum/stare/',\n      'just a moment', // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä Cloudflare 403\n      'enable javascript and cookies', // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä 403\n      'pik.krakow.pl', // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è pik.krakow.pl\n      'krakow.pl/getPdf', // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ PDF\n      'repozytorium.asp.krakow.pl' // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π\n    ];\n    \n    const textToCheck = `${url} ${title} ${snippet}`.toLowerCase();\n    \n    for (const pattern of criticalPatterns) {\n      if (textToCheck.includes(pattern)) {\n        console.log(`üö´ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –≤ URL: ${pattern} –Ω–∞–π–¥–µ–Ω –≤ ${url}`);\n        return true;\n      }\n    }\n    \n    return false;\n  }\n  \n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ URL\n  function isLikelyOutdated(url, title, snippet, publishedAt) {\n    const HOURS_LIMIT = 12; // –§–∏–ª—å—Ç—Ä –∑–∞ 12 —á–∞—Å–æ–≤\n    const now = new Date();\n\n    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ publishedAt, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ\n    if (publishedAt) {\n      const pubDate = new Date(publishedAt);\n      const hoursDiff = (now - pubDate) / (1000 * 60 * 60);\n      if (hoursDiff > HOURS_LIMIT) {\n        console.log(`üìÖ –ù–æ–≤–æ—Å—Ç—å —É—Å—Ç–∞—Ä–µ–ª–∞ –Ω–∞ ${Math.round(hoursDiff)} —á–∞—Å–æ–≤: ${title}`);\n        return true;\n      }\n      return false;\n    }\n\n    // Fallback: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ URL\n    const dateMatches = url.match(/(\\d{4})[\\/\\-](\\d{1,2})[\\/\\-](\\d{1,2})/);\n    if (dateMatches) {\n      const urlDate = new Date(dateMatches[1], dateMatches[2] - 1, dateMatches[3]);\n      const daysDiff = (now - urlDate) / (1000 * 60 * 60 * 24);\n      if (daysDiff > 0.5) { // 0.5 –¥–Ω—è = 12 —á–∞—Å–æ–≤\n        console.log(`üìÖ URL —É—Å—Ç–∞—Ä–µ–ª –Ω–∞ ${Math.round(daysDiff)} –¥–Ω–µ–π: ${url}`);\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞\n  function hasStopWords(title, snippet) {\n    const stopWords = [\n      'wojna', 'wojenny', 'wojenna', 'wojen',\n      'morderstwo', 'morderstwa', 'mordercy', 'morderca',\n      'obrona', 'obrony', 'obronne',\n      'reklama', 'reklamy', 'reklamowy'\n    ];\n    \n    const textToCheck = `${title} ${snippet}`.toLowerCase();\n    \n    for (const word of stopWords) {\n      if (textToCheck.includes(word)) {\n        console.log(`üö´ –°—Ç–æ–ø-—Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ: \"${word}\" –≤ \"${textToCheck}\"`);\n        return true;\n      }\n    }\n    return false;\n  }\n  \n  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏\n  const sortedResults = [...searchResults.organic_results].sort((a, b) => {\n    const aHasDate = /\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}/.test(a.link);\n    const bHasDate = /\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}/.test(b.link);\n    \n    if (!aHasDate && bHasDate) return -1;\n    if (aHasDate && !bHasDate) return 1;\n    \n    if (a.position && b.position) {\n      return a.position - b.position;\n    }\n    \n    return 0;\n  });\n  \n  const filteredReasons = {\n    duplicateLink: 0,\n    duplicateTitle: 0,\n    problematicUrl: 0,\n    outdated: 0,\n    stopWords: 0\n  };\n  \n  // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –¥–æ –ø–µ—Ä–≤–æ–π –≤–∞–ª–∏–¥–Ω–æ–π\n  for (let i = 0; i < sortedResults.length; i++) {\n    const result = sortedResults[i];\n    const link = result.link;\n    const title = result.title;\n    const snippet = result.snippet || '';\n    const publishedAt = result.publishedAt || null; // –ü–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n    \n    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç—å ${i + 1}/${sortedResults.length}: ${title}`);\n    \n    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç —Å—Å—ã–ª–∫–∏\n    const isLinkDuplicate = existingLinksSet.has(link);\n    if (isLinkDuplicate) {\n      filteredReasons.duplicateLink++;\n      console.log(`‚ùå –î—É–±–ª–∏–∫–∞—Ç —Å—Å—ã–ª–∫–∏: ${title} | URL: ${link}`);\n      continue;\n    }\n    \n    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞\n    const normalizedTitle = title.toLowerCase().trim();\n    const isTitleDuplicate = existingTitles.some(existingTitle => {\n      const similarity = normalizedTitle === existingTitle || \n                        (normalizedTitle.length > 10 && existingTitle.includes(normalizedTitle)) ||\n                        (existingTitle.length > 10 && normalizedTitle.includes(existingTitle));\n      if (similarity) {\n        console.log(`üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:`);\n        console.log(`   –ù–æ–≤—ã–π: \"${normalizedTitle}\"`);\n        console.log(`   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π: \"${existingTitle}\"`);\n      }\n      return similarity;\n    });\n    if (isTitleDuplicate) {\n      filteredReasons.duplicateTitle++;\n      console.log(`‚ùå –î—É–±–ª–∏–∫–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${title}`);\n      continue;\n    }\n    \n    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ø-—Å–ª–æ–≤–∞\n    if (hasStopWords(title, snippet)) {\n      filteredReasons.stopWords++;\n      console.log(`‚ùå –ù–æ–≤–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤–∞: ${title}`);\n      continue;\n    }\n    \n    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ URL\n    if (isProblematicUrl(link, title, snippet)) {\n      filteredReasons.problematicUrl++;\n      console.log(`‚ùå –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å—Å—ã–ª–∫–∞: ${title}`);\n      continue;\n    }\n    \n    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ URL\n    if (isLikelyOutdated(link, title, snippet, publishedAt)) {\n      filteredReasons.outdated++;\n      console.log(`‚ùå –£—Å—Ç–∞—Ä–µ–≤—à–∞—è –Ω–æ–≤–æ—Å—Ç—å: ${title}`);\n      continue;\n    }\n    \n    // –ù–æ–≤–æ—Å—Ç—å –≤–∞–ª–∏–¥–Ω–∞\n    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å: ${title}`);\n    \n    return [{\n      status: 'success',\n      title: title,\n      description: snippet,\n      link: link,\n      position: result.position || i + 1,\n      source: result.source || '',\n      isFiltered: true,\n      processed_count: sortedResults.length,\n      checked_count: i + 1,\n      filtered_count: i,\n      filter_reasons: filteredReasons,\n      restart_search: false,\n      retry_count: retryCount,\n      timestamp: new Date().toISOString()\n    }];\n  }\n  \n  // –ï—Å–ª–∏ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã\n  retryCount++;\n  if (retryCount >= MAX_RETRIES) {\n    console.log(`‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ (${retryCount}). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–∏–∫–ª.`);\n    return [{\n      status: 'max_retries',\n      message: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π',\n      processed_count: sortedResults.length,\n      filtered_count: sortedResults.length,\n      retry_count: retryCount,\n      restart_search: false,\n      timestamp: new Date().toISOString()\n    }];\n  }\n  \n  console.log(`‚ùå –í—Å–µ ${sortedResults.length} –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—ã—Ç–∫–∞ ${retryCount}.`);\n  \n  return [{\n    status: 'all_filtered',\n    message: '–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫',\n    processed_count: sortedResults.length,\n    filtered_count: sortedResults.length,\n    retry_count: retryCount,\n    restart_search: true,\n    timestamp: new Date().toISOString()\n  }];\n}\n\n// ======= –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø N8N =======\ntry {\n  // –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n  const allInputs = $input.all();\n  console.log(`–ü–æ–ª—É—á–µ–Ω–æ ${allInputs.length} –≤—Ö–æ–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);\n  \n  // –†–∞–∑–¥–µ–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ—Å—Ç—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞\n  const existingPosts = allInputs\n    .filter(item => item.json && (item.json.id || item.json.post_id))\n    .map(item => item.json);\n  \n  const searchResultsItem = allInputs.find(item => \n    item.json && item.json.organic_results\n  );\n  \n  if (!searchResultsItem) {\n    console.log('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞');\n    return [{\n      status: 'error',\n      error_type: 'no_search_data',\n      message: '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ –≤ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',\n      received_inputs: allInputs.length,\n      restart_search: true,\n      timestamp: new Date().toISOString()\n    }];\n  }\n  \n  const searchResults = searchResultsItem.json;\n  console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤: ${existingPosts.length}`);\n  console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: ${searchResults.organic_results ? searchResults.organic_results.length : 0}`);\n  \n  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é\n  const result = filterNewsWithAdvancedChecks(existingPosts, searchResults);\n  \n  console.log('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');\n  console.log(`–°—Ç–∞—Ç—É—Å: ${result[0].status}`);\n  console.log(`–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞: ${result[0].restart_search}`);\n  \n  return result;\n  \n} catch (error) {\n  console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', error);\n  \n  let retryCount = ($json.retry_count || 0) + 1;\n  const MAX_RETRIES = 5;\n  \n  if (retryCount >= MAX_RETRIES) {\n    console.log(`‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ (${retryCount}) –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏.`);\n    return [{\n      status: 'error',\n      error_type: 'max_retries',\n      message: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏',\n      stack: error.stack,\n      retry_count: retryCount,\n      restart_search: false,\n      timestamp: new Date().toISOString()\n    }];\n  }\n  \n  return [{\n    status: 'error',\n    error_type: 'processing_error',\n    message: error.message,\n    stack: error.stack,\n    retry_count: retryCount,\n    restart_search: true,\n    timestamp: new Date().toISOString()\n  }];\n}\n\n----------------------\n\nüìã –ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
    }
  ],
  "connections": {
    "Instagram Scraper": {
      "main": [
        [
          {
            "node": "Instagram Virality Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Instagram Virality Filter": {
      "main": [
        [
          {
            "node": "Get Links1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Instagram Videos": {
      "main": [
        [],
        [
          {
            "node": "Generate Unique ID5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Instagram Video": {
      "main": [
        [
          {
            "node": "Upload Instagram Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Instagram Video": {
      "main": [
        [
          {
            "node": "Add Instagram to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Instagram to DB": {
      "main": [
        [
          {
            "node": "Split Instagram Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Unique ID5": {
      "main": [
        [
          {
            "node": "Download Instagram Video",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TikTok Scraper": {
      "main": [
        [
          {
            "node": "Filter & Score Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter & Score Videos": {
      "main": [
        [
          {
            "node": "Get Links",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Weekly Scraper1": {
      "main": [
        [
          {
            "node": "TikTok Scraper",
            "type": "main",
            "index": 0
          },
          {
            "node": "Instagram Scraper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Duplicate Filter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Links": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Duplicate Filter": {
      "main": [
        [
          {
            "node": "Download TikTok Sub",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download TikTok Sub": {
      "main": [
        [
          {
            "node": "Add to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add to DB": {
      "main": [
        []
      ]
    },
    "Get Links1": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Duplicate Filter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Duplicate Filter1": {
      "main": [
        [
          {
            "node": "Split Instagram Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "e1c456741f13b772b8094e1b530691cf5c07795176582e40dc988a9c967c6f8a"
  }
}